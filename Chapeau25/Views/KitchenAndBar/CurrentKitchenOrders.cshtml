@using Chapeau25.Enums
@model List<Chapeau25.ViewModel.BarAndKitchenViewModel>

@{
    ViewData["Title"] = "Kitchen - Running Orders";
}

<!-- Top Navbar -->
<header>
    <partial name="_TopMenuKitchenAndBar" />
</header>

<div class="d-flex flex-wrap gap-4 mt-4">
    @foreach (var order in Model)
    {
        <div class="card shadow" style="width: 23%; min-width: 250px; border-radius: 15px;">
            <div class="card-header d-flex justify-content-between align-items-center bg-primary text-white" style="border-top-left-radius: 15px; border-top-right-radius: 15px;">
                <div>
                    <P class="bi bi-clock">Waiting time: @order.RunningTime.ToString(@"hh\:mm")</P>
                    <small class="bi bi-clock">Ordered time: @order.OrderdTime.ToString(@"hh\:mm")</small>

                    <p >Table: @order.TableNumber</p>
                </div>
                <div class="text-end">
                    <p class="me-3"> Food Item</p>
                  

                    <form method="post" action="/KitchenAndBar/ChangeEntireFoodStatus" class="mt-2">
                        <input type="hidden" name="orderId" value="@order.OrderId" />
                        <input type="hidden" name="isDrink" value="false" />
                        @{
                            var allStatuses = order.OrderItems.Select(oi => oi.OrderItemStatus).ToList();
                            string nextStatus = "Ordered";

                            if (allStatuses.All(s => s == OrderItemStatus.Ordered))
                            {
                                nextStatus = "Preparing";
                            }
                            else if (allStatuses.All(s => s == OrderItemStatus.Preparing))
                            {
                                nextStatus = "Ready";
                            }
                            else if (allStatuses.All(s => s == OrderItemStatus.Ready))
                            {
                                nextStatus = "Served";
                            }
                            else
                            {
                                nextStatus = "Served"; // fallback for mixed statuses
                            }
                         }

                        <button type="submit" name="orderItemStatus" value="@nextStatus" class="btn btn-outline-light btn-sm">
                            Set All @nextStatus
                        </button>
                    </form>
                </div>
            </div>

            @{
                var courseOrder = new Dictionary<string, int>
                {
                { "Starter", 1 },
                { "Main", 2 },
                { "Dessert", 3 }
                };

                var groupedItems = order.OrderItems
                .GroupBy(item => item.Type)
                .OrderBy(group => courseOrder.ContainsKey(group.Key) ? courseOrder[group.Key] : 99)
                .ToList();
            }

            @foreach (var group in groupedItems)
            {
                string courseStatus = "Ordered";

                if (group.Any(oi => oi.OrderItemStatus == OrderItemStatus.Ordered))
                {
                    courseStatus = "Ordered";
                }
                else if (group.Any(oi => oi.OrderItemStatus == OrderItemStatus.Preparing))
                {
                    courseStatus = "Preparing";
                }
                else if (group.Any(oi => oi.OrderItemStatus == OrderItemStatus.Ready))
                {
                    courseStatus = "Ready";
                }
                else
                {
                    courseStatus = "Served";
                }


                <div class="mb-3">
                    <div style="background-color:#d5d5d5;display:flex;justify-content:space-between;align-items:center;padding:6px 15px;">
                        <h6>@group.Key</h6>
                        <form method="post" action="/KitchenAndBar/ChangeCourseStatus">
                            <input type="hidden" name="orderId" value="@order.OrderId" />
                            <input type="hidden" name="course" value="@group.Key" />

                            @if (courseStatus == "Ordered")
                            {
                                <button type="submit" name="courseStatus" value="Preparing" class="btn btn-warning">Ordered</button>
                            }
                            else if (courseStatus == "Preparing")
                            {
                                <button type="submit" name="courseStatus" value="Ready" class="btn btn-success">Preparing</button>
                            }
                            else if (courseStatus == "Ready")
                            {
                                <button type="submit" name="courseStatus" value="Served" class="btn btn-success">Ready</button>
                            }
                            else
                            {
                                <button type="submit" class="btn btn-secondary" disabled>Served</button>
                            }
                        </form>
                    </div>

                    @foreach (OrderItem item in group)
                    {
                        <div class="d-flex justify-content-between align-items-start mb-2" style="padding:6px 15px;">
                            <div>
                                <strong>@item.Quantity x @item.ItemName</strong>
                                <br/>
                                <small>@item.Comment</small>
                            </div>
                            <div>
                                <form method="post" action="/KitchenAndBar/ChangeKitchenOrderItemStatus">
                                    <input type="hidden" name="orderItemId" value="@item.OrderItemID" />
                                    @if (item.OrderItemStatus == OrderItemStatus.Ordered)
                                    {
                                        <button type="submit" name="orderItemStatus" value="@OrderItemStatus.Preparing" class="btn btn-warning">Ordered</button>
                                    }
                                    else if (item.OrderItemStatus == OrderItemStatus.Preparing)
                                    {
                                        <button type="submit" name="orderItemStatus" value="@OrderItemStatus.Ready" class="btn btn-success">Preparing</button>
                                    }
                                    else if (item.OrderItemStatus == OrderItemStatus.Ready)
                                    {
                                        <button type="submit" name="orderItemStatus" value="@OrderItemStatus.Served" class="btn btn-success">Ready</button>
                                    }
                                    else
                                    {
                                        <button type="submit" class="btn btn-secondary" disabled>Served</button>
                                    }
                                </form>
                            </div>
                        </div>
                    }
                </div>
            }
        </div>
    }
</div>
